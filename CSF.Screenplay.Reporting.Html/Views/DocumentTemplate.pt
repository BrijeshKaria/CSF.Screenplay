<html>
<head>
<title>Screenplay report</title>
<meta charset="UTF-8" />
<style>
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
  display: block;
}
body {
  line-height: 1;
}
ol, ul {
  list-style: none;
}
blockquote, q {
  quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}

body {
  font-family: "DejaVu Sans", "Droid Sans", "Verdana", Arial, sans;
  padding: 0.6em;
}
body>header {
  border-bottom: 1px solid #CCC;
  margin-bottom: 1em;
  padding-bottom: 0.1em;
  padding-right: 0.1em;
  overflow: auto;
}
body>header h1 {
  font-size: 200%;
  line-height: 140%;
  color: #999;
  float: left;
}
body>header .summary {
  float: right;
  font-size: 85%;
}
.hidden {
  display: none;
}
body>header .summary .help_text {
  float: left;
  color: #666;
  max-width: 10em;
  line-height: 140%;
  margin-top: 1em;
  margin-right: 1em;
  display: none;
}
#summary_table {
  float: right;
}
#summary_table col.success,
#summary_table col.failing,
#summary_table col.total {
  width: 5em;
}
#summary_table tbody td,
#summary_table tbody th {
  padding: 0.4em 0;
}
#summary_table td {
  text-align: center;
  border: 1px solid #CCC;
}
#summary_table th {
  font-weight: bold;
  color: #666;
}
#summary_table thead th {
  padding-bottom: 0.2em;
}
#summary_table tbody th {
  text-align: right;
  padding-right: 0.2em;
}


body>footer {
  border-top: 1px solid #CCC;
  margin-top: 1em;
  line-height: 140%;
  font-size: 90%;
  color: #999;
}
body>footer .timestamp,
body>footer .datestamp {
  color: #444;
}
body>footer a {
  text-decoration: none;
  color: #337;
}
body>footer a:hover {
  border-bottom: 1px solid #337;
}

.report .features {
  border-radius: 6px;
  border: 1px solid #EB9;
}
.feature {
  background-color: #E0E0E0;
}
.feature:first-child,
.feature:first-child>header {
  border-top-left-radius: 6px;
  border-top-right-radius: 6px;
}
.feature:last-child {
  border-bottom-left-radius: 6px;
  border-bottom-right-radius: 6px;
  border-bottom-width: 0;
}
.feature>header {
  padding: 0.8em 0.4em 0.4em 1.4em;
  background: linear-gradient(to bottom, #FFF 0%,#E0E0E0 100%);
  overflow: auto;
  border-bottom: 1px solid #B9B9B9;
}
.feature.failure>header {
  background: linear-gradient(to bottom, #FAA 0%,#E0E0E0 100%);
}
.feature>header .identifier {
  font-size: 80%;
  color: #777;
  float: right;
}
.feature>header .name {
  font-size: 140%;
  float: left;
}
.scenario>header {
  padding: 1.4em 0.4em 0.4em 2em;
  background: linear-gradient(to bottom, #E0E0E0 0%,#D0D0D0 100%);
  overflow: auto;
}
.scenario.failure>header {
  background: linear-gradient(to bottom, #F99 0%,#D0D0D0 100%);
}
.scenario {
  border-bottom: 1px solid #B9B9B9;
  background-color: #D0D0D0;
}
.feature:last-child .scenario:last-child {
  border-bottom-left-radius: 6px;
  border-bottom-right-radius: 6px;
}
.scenario>header .identifier {
  font-size: 80%;
  color: #777;
  float: right;
}
.scenario>header .name {
  font-size: 110%;
  float: left;
  font-style: italic;
}
.scenario>.reportables {
  font-size: 90%;
}
.scenario>.reportables>.reportable {
  background: #E0E0E0;
  margin-left: 6.4em;
  border-left: 1px solid #B0B0B0;
}
.scenario>.reportables>.reportable .failure {
    color: #900;
    font-style: italic;
}
.scenario>.reportables>.reportable .performance:before,
.scenario>.reportables>.reportable .ability:before {
    float: right;
    font-size: 110%;
    margin: 0.1em 0.6em 0 0.2em;
    padding-top: 0.2em;
    line-height: 140%;
    vertical-align: middle;
}
.scenario>.reportables>.reportable .failure:before {
    content: "✘";
    color: #900;
}
.scenario>.reportables>.reportable .success:before {
    content: "✔";
    color: #999;
}
.scenario>.reportables>.reportable .failure .additional_content {
    color: #000;
    font-style: normal;
}
.feature:last-child .scenario:last-child .reportable:last-child {
  border-bottom-right-radius: 6px;
  padding-bottom: 0.4em;
}
.reportable {
  margin-left: 0;
}
.reportable .reportables {
  padding-left: 2em;
  margin-top: -0.4em;
}
.reportable .description {
  overflow: auto;
  padding: 0.4em 0;
  line-height: 140%;
}
.scenario>.reportables>.reportable>* {
  margin-left: -3.6em;
}
.reportable .description .performance_type {
  display: block;
  float: left;
  min-width: 4em;
  font-weight: bold;
}
.reportable .description .body {
  display: block;
  float: left;
}
.reportable .additional_content {
  margin: 0.4em 0 0 4em;
}
.reportable .reportable .additional_content {
  margin-left: 0;
}
.reportable .extended_content {
  font-size: 90%;
  line-height: 120%;
  padding-bottom: 0.6em;
}
.reportable .extended_content strong {
  font-weight: bold;
}
.reportable .extended_content pre {
  font-family: "Droid Sans Mono", "DejaVu Sans Mono", "Lucida Console", monospace;
  margin-right: 0.4em;
  background: #D0D0D0;
  border: 1px solid #B0B0B0;
  padding: 0.2em;
  max-height: 15em;
  overflow: auto;
}

html.js body>header .summary .help_text {
  display: block;
}
html.js #summary_table td {
  cursor: pointer;
}
html.js #summary_table td.active {
  background: #FFD;
}

html.js .feature.collapsed .scenarios,
html.js .scenario.collapsed .reportables {
  display: none;
}
html.js .feature.collapsed {
  border-bottom: 1px solid #A9A9A9;
}
html.js .feature.collapsed.last_visible {
  border-bottom-width: 0;
}
html.js .feature.collapsed header,
html.js .scenario.collapsed header {
  border-bottom: 0 none;
}
html.js .feature:last-child.collapsed header {
  border-bottom-left-radius: 6px;
  border-bottom-right-radius: 6px;
}
html.js .feature>header,
html.js .scenario>header {
  cursor: pointer;
}
.feature>header:before,
.scenario>header:before {
  float: left;
  margin-left: -1.2em;
  font-size: 90%;
  vertical-align: middle;
  color: #999;
  padding: 0 0.2em;
  width: 1em;
  display: block;
  text-align: center;
}
.feature>header:before {
  line-height: 1.4em;
}
.scenario>header:before {
  line-height: 1.1em;
}
html.js .feature>header:before,
html.js .scenario>header:before {
  content: '▼';
}
html.js .feature.collapsed>header:before,
html.js .scenario.collapsed>header:before {
  content: '▶';
}

html.js section.report.filter_features_success .feature.failure,
html.js section.report.filter_features_failing .feature.success,
html.js section.report.filter_scenarios_success .scenario.failure,
html.js section.report.filter_scenarios_failing .scenario.success {
  display: none;
}
html.js .feature.first_visible,
html.js .feature.first_visible>header {
  border-top-left-radius: 6px;
  border-top-right-radius: 6px;
}
html.js .feature.last_visible {
  border-bottom-left-radius: 6px;
  border-bottom-right-radius: 6px;
  border-bottom-width: 0;
}
html.js .feature.last_visible .scenario.last_visible {
  border-bottom-left-radius: 6px;
  border-bottom-right-radius: 6px;
  border-bottom-width: 0;
}
html.js .scenario.last_visible,
html.js .scenario.last_visible>header {
}
.feature.last_visible .scenario.last_visible .reportable:last-child {
  border-bottom-right-radius: 6px;
  padding-bottom: 0.4em;
}
</style>
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
        integrity="sha256-k2WSCIexGzOj3Euiig+TlR8gA0EmPjuc79OEeY5L45g="
        crossorigin="anonymous"></script>
<script>
(function(report, undefined) {
  'use strict';
  
  function PageInteractionsCtor()
  {
    var self = this;
    
    self.filter = new report.Filter();
    self.folding = new report.Folding();
  }
  
  PageInteractionsCtor.prototype.init = function()
  {
    this.filter.init();
    this.folding.init();
  }
  
  report.PageInteractions = PageInteractionsCtor;
  
}(report = window.report || {}));

(function(window, $, report, undefined) {
  'use strict';
  
  function getFilterClassName(level, type)
  {
    return 'filter_' + level + '_' + type;
  }
  
  function setSummaryTableStyle(level, type, active)
  {
    var
      selector = 'tr.' + level + ' .' + type,
      element = $(selector, this.summaryTable);
    if(active)
      element.addClass('active');
    else
      element.removeClass('active');
  }
  
  function clearFilter(level)
  {
    var types = [ 'success', 'failing', 'total' ];
    for(var i = 0; i < types.length; i++)
    {
      var type = types[i];
      this.reportBody.removeClass(getFilterClassName(level, type));
      setSummaryTableStyle.apply(this, [ level, type, false ])
    }
  }
  
  function markFirstAndLastFeatures()
  {
    $('.feature', this.reportBody)
      .removeClass('first_visible')
      .removeClass('last_visible');
    
    $('.feature:visible:first', this.reportBody)
      .addClass('first_visible');
    
    $('.feature:visible:last', this.reportBody)
      .addClass('last_visible');
  }
  
  function markFirstAndLastScenarios()
  {
    $('.feature .scenario', this.reportBody)
      .removeClass('first_visible')
      .removeClass('last_visible');
      
    $('.feature', this.reportBody)
      .each(function(id, feature) {
        var $feature = $(feature);
        $('.scenario:visible:first', $feature)
          .addClass('first_visible');
        
        $('.scenario:visible:last', $feature)
          .addClass('last_visible');
      });
  }
  
  function applyFilter(level, type)
  {
    clearFilter.apply(this, [ level ]);
    this.reportBody.addClass(getFilterClassName(level, type));
    setSummaryTableStyle.apply(this, [ level, type, true ])
    if(level === 'features')
    {
      markFirstAndLastFeatures.apply(this);
    }
    if(level === 'scenarios')
    {
      markFirstAndLastScenarios.apply(this);
    }
  }
  
  function bindEvents()
  {
    var self = this;
    
    self.summaryTable.on('click', 'td', function() {
      var
        $this = $(this),
        cellClass = $this.attr('class'),
        rowClass = $this.parent().attr('class');
      
      if($this.hasClass('active')) return;
      
      applyFilter.apply(self, [ rowClass, cellClass ]);
    });
  }
  
  function activateTotals()
  {
    applyFilter.apply(this, [ 'features', 'total' ]);
    applyFilter.apply(this, [ 'scenarios', 'total' ]);
  }
  
  function addHelpText()
  {
    this.summaryTable.before('<p class="help_text">Click on the totals to filter the report</p>');
  }
  
  function FilterCtor()
  {
    this.summaryTable = $('#summary_table');
    this.reportBody = $('section.report');
  }
  
  FilterCtor.prototype.init = function()
  {
    bindEvents.apply(this);
    activateTotals.apply(this);
    addHelpText.apply(this);
  }
  
  report.Filter = FilterCtor;
  
}(window, window.jQuery || null, report = window.report || {}));

(function(window, $, report, undefined) {
  'use strict';
  
  var collapsed = 'collapsed';
  
  function bindEvents()
  {
    var self = this;
    
    self.reportBody.on('click', self.selectors.featureHeaders, function() {
      var $this = $(this);
      $this.parent().toggleClass(collapsed);
    })
    
    self.reportBody.on('click', self.selectors.scenarioHeaders, function() {
      var $this = $(this);
      $this.parent().toggleClass(collapsed);
    })
  }
  
  function collapseAll()
  {
    var self = this;
    
    $(self.selectors.features, self.reportBody)
      .add(self.selectors.scenarios, self.reportBody)
      .addClass(collapsed);
  }
  
  function FoldingCtor()
  {
    this.reportBody = $('section.report');
      
    this.selectors = {
      featureHeaders: '.feature>header',
      scenarioHeaders: '.scenario>header',
      features: '.feature',
      scenarios: '.scenario',
    };
  }
  
  FoldingCtor.prototype.init = function()
  {
    bindEvents.apply(this);
    collapseAll.apply(this);
  }
  
  report.Folding = FoldingCtor;
  
}(window, window.jQuery || null, report = window.report || {}));

(function($, report, undefined) {
  'use strict';
  
  if(!$) return;
  
  $(function() {
    $('html').addClass('js');
    var page = new report.PageInteractions();
    page.init();
  })
  
}(window.jQuery || null, report = window.report || {}));
</script>
</head>
<body tal:define="report here/Report">
<header>
  <h1>Screenplay report</h1>
  <div class="summary">
    <h2 class="hidden">Count of passing, failing and total features/scenarios</h2>
    <table id="summary_table">
      <colgroup>
        <col class="performance_type" />
        <col class="success" />
        <col class="failing" />
        <col class="total" />
      </colgroup>
      <thead>
        <tr>
          <th></th>
          <th>Success</th>
          <th>Failure</th>
          <th>Total</th>
        </tr>
      </thead>
      <tbody>
        <tr class="features">
          <th>Features</th>
          <td class="success" tal:content="report/SuccessfulFeatureCount">5</td>
          <td class="failing" tal:content="report/FailingFeatureCount">3</td>
          <td class="total" tal:content="report/TotalFeatureCount">8</td>
        </tr>
        <tr class="scenarios">
          <th>Scenarios</th>
          <td class="success" tal:content="report/SuccessfulScenarioCount">10</td>
          <td class="failing" tal:content="report/FailingScenarioCount">20</td>
          <td class="total" tal:content="report/TotalScenarioCount">30</td>
        </tr>
      </tbody>
    </table>
  </div>
</header>
<section class="report"
         tal:define="features report/Features;
                     myMacros here/GetMacros">
  <h2 class="hidden">Features, scenarios and reportables in this report</h2>
  <ul class="features">
    <li tal:condition="nothing" class="feature success">
      <header>
        <div class="identifier">
          <span class="hidden">Feature ID:</span>
          Another.Feature.Identifier
        </div>
        <h2 class="name">
          <span class="hidden">Feature name:</span>
          Another feature name
        </h2>
      </header>
      <ul class="scenarios">
        <li class="scenario success">
          <header>
            <div class="identifier">
              <span class="hidden">Scenario ID:</span>
              Feature2.Scenario1.Identifier.Here
            </div>
            <h3 class="name">
              <span class="hidden">Scenario name:</span>
              A scenario in a different feature
            </h3>
          </header>
          <ol class="reportables">
            <li class="reportable">
              <!-- The base macro for a reportable, we never use this directly, only extend it -->
              <div metal:define-macro="reportable"
                   tal:define="outcomeClass csharp:here.GetOutcomeClass(reportable);
                               reportableClass csharp:here.GetReportableClass(reportable);
                               containerClass string:$outcomeClass $reportableClass"
                   tal:attributes="class containerClass"
                   class="performance success template">
                <p class="description"
                   tal:define="actor reportable/Actor">
                  <strong tal:condition="rootReportable"
                          tal:content="reportable/PerformanceType"
                          class="performance_type">Given</strong>
                  <span metal:define-slot="body" class="body">the body of this reportable</span>
                </p>
                <div class="additional_content"
                     metal:define-slot="additional_content"
                     tal:condition="nothing"
                     style="display: none;">
                  Additional content
                </div>
              </div>
            </li>
            <li class="reportable">
              <!-- The macro for an ability -->
              <div metal:extend-macro="reportable"
                   metal:define-macro="ability"
                   class="ability success inner_macro">
                <p class="description">
                  <strong class="performance_type">Given</strong>
                  <span metal:fill-slot="body" class="body"
                        tal:define="ability reportable/Ability;
                                    reportBody csharp:ability.GetReport(actor)"
                        tal:content="reportBody | default">Joe is able to browse the web</span>
                </p>
              </div>
            </li>
            <li class="reportable">
              <!-- The base macro for a performance, it can be used directly or extended -->
              <div metal:extend-macro="reportable"
                   metal:define-macro="performance"
                   class="performance success inner_macro">
                <p class="description">
                  <strong class="performance_type">When</strong>
                  <span metal:fill-slot="body" class="body"
                        tal:define="performable reportable/Performable;
                                    reportBody csharp:performable.GetReport(actor)"
                        tal:content="reportBody | default">Joe attempts to do a thing</span>
                </p>
                <div class="additional_content"
                     metal:fill-slot="additional_content"
                     tal:condition="reportable/HasAdditionalContent">
                  <div class="extended_content"
                       metal:define-slot="extended_content"
                       tal:condition="nothing"
                       style="display: none;">
                    Extended content
                  </div>
                  <ol tal:define="reportables reportable/Reportables;
                                  hasReportables reportable/HasReportables;
                                  rootReportable csharp:false"
                      class="reportables"
                      tal:condition="hasReportables">
                    <li tal:repeat="reportable reportables" class="reportable">
                      <tal:block define="macroName csharp:here.GetMacroName(reportable);
                                         macro myMacros/?macroName;
                                         macroMarkup load:macro"
                                 replace="structure macroMarkup | nothing">
                        <p>Child reportable content</p>
                      </tal:block>
                    </li>
                  </ol>
                </div>
              </div>
            </li>
            <li class="reportable">
              <!-- The macro for a performance which has a result -->
              <div metal:extend-macro="performance"
                   metal:define-macro="performance_success_result"
                   class="performance success inner_macro">
                <p class="description">
                  <strong class="performance_type">Then</strong>
                  <span class="body">Joe reads some kind of value</span>
                </p>
                <div class="additional_content">
                  <div class="extended_content performance_result"
                       metal:fill-slot="extended_content">
                    <p>
                      <strong>Result</strong>
                      <span tal:replace="csharp:here.Format(reportable.Result)">The performance result</span>
                    </p>
                  </div>
                </div>
              </div>
            </li>
            <li class="reportable">
              <!-- The macro for a performance which has failed with an exception -->
              <div metal:extend-macro="performance"
                   metal:define-macro="performance_failure_exception"
                   class="performance failure inner_macro">
                <p class="description">
                  <strong class="performance_type">Then</strong>
                  <span class="body">Joe does something that fails</span>
                </p>
                <div class="additional_content">
                  <div class="extended_content performance_exception"
                       metal:fill-slot="extended_content"
                       tal:define="exception reportable/Exception | nothing">
                    <p>
                      Failed
                      <span tal:omit-tag="string:Yes"
                            tal:condition="exception">with an <strong>exception</strong></span>
                    </p>
                    <pre tal:condition="exception" tal:content="exception">Exception
  at My.Funky.Stack.Trace.Line1 &gt; Something
  at My.Funky.Stack.Trace.Line2 &gt; Something else
  at My.Funky.Stack.Trace.Line3 &gt; Something different</pre>
                  </div>
                </div>
              </div>
            </li>
          </ol>
        </li>
      </ul>
    </li>
    <li tal:repeat="feature features"
        class="feature failure"
        tal:attributes="class csharp:here.GetOutcomeClass(feature)">
      <header>
        <div class="identifier"
             tal:condition="feature/Id | nothing">
          <span class="hidden">Feature ID:</span>
          <span tal:replace="feature/Id">Feature.Identifier.Here</span>
        </div>
        <h2 class="name">
          <span class="hidden">Feature name:</span>
          <span tal:replace="feature/FriendlyName">This is where the feature name goes</span>
        </h2>
      </header>
      <ul class="scenarios" tal:define="scenarios feature/Scenarios">
        <li tal:repeat="scenario scenarios"
            class="scenario success"
            tal:attributes="class csharp:here.GetOutcomeClass(scenario)">
          <header>
            <div class="identifier"
                 tal:condition="scenario/Id | nothing">
              <span class="hidden">Scenario ID:</span>
              <span tal:replace="scenario/Id">Scenario.Identifier.Here</span>
            </div>
            <h3 class="name">
              <span class="hidden">Scenario name:</span>
              <span tal:replace="scenario/FriendlyName">My very interesting scenario</span>
            </h3>
          </header>
          <ol class="reportables"
              tal:define="reportables scenario/Reportables;
                          rootReportable csharp:true">
            <li tal:repeat="reportable reportables" class="reportable">
              <div tal:define="macroName csharp:here.GetMacroName(reportable);
                               macro myMacros/?macroName;
                               macroMarkup load:macro"
                   tal:replace="structure macroMarkup | nothing">
                <p class="description">
                  <strong class="performance_type">Given</strong>
                  <span class="body">Reportable content</span>
                </p>
              </div>
            </li>
          </ol>
        </li>
        <li class="scenario failure" tal:condition="nothing">
          <header>
            <div class="identifier">
              <span class="hidden">Scenario ID:</span>
              Feature1.Scenario2.Identifier.Here
            </div>
            <h3 class="name">
              <span class="hidden">Scenario name:</span>
              A second scenario in the feature
            </h3>
          </header>
          <ol class="reportables">
            <li class="reportable">
              <div>
                <p class="description">
                  <strong class="performance_type">Given</strong>
                  <span class="body">Reportable content</span>
                </p>
              </div>
            </li>
          </ol>
        </li>
        <li class="scenario success" tal:condition="nothing">
          <header>
            <div class="identifier">
              <span class="hidden">Scenario ID:</span>
              Feature1.Scenario3.Identifier.Here
            </div>
            <h3 class="name">
              <span class="hidden">Scenario name:</span>
              A third scenario in the feature
            </h3>
          </header>
          <ol class="reportables">
            <li class="reportable">
              <div>
                <p class="description">
                  <strong class="performance_type">Given</strong>
                  <span class="body">Reportable content</span>
                </p>
              </div>
            </li>
          </ol>
        </li>
      </ul>
    </li>
  </ul>
</section>
<footer tal:define="timestamp csharp:report.Timestamp.ToString(&quot;T&quot;);
                    datestamp csharp:report.Timestamp.ToString(&quot;D&quot;)">
  <p>
    This report was created at
    <span tal:content="timestamp" class="timestamp">12:40:33</span>
    on
    <span class="datestamp" tal:content="datestamp">2011-03-01</span>
    using <a href="https://github.com/csf-dev/CSF.Screenplay">CSF.Screenplay</a>.
  </p>
</footer>
</body>
</html>
